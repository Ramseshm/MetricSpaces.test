# -*- coding: utf-8 -*-
"""Main1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NbQxjuKDUkGwvFsLmw8D9fj4vR6KkxEs
"""

import numpy as np
import json

#from ...espacio import String as space
from ...espacio import Vectors as space

def loadIndice(indexname):
  path="./"+indexname+".json"
  with open(path) as f:
    data = json.load(f)
  return data

Indice=list()
def inter(l):
  s1=set(l[0])
  for i in range(1,len(l)):
    s1=s1.intersection(l[i])
  return list(s1)

def perm(l1):
  l1.append(l1[0].copy())
  l1[1].sort()
  l2=l1[0].copy()
  aux=list()

  for i in l1[1]:
    j=l1[0].index(i)
    aux.append(j+1)
    l1[0][j]=-1

  return aux

def ordenar(l1):
  l1.append(l1[0].copy())
  l1[1].sort()
  aux=list()
  for i in l1[1]:
    j=l1[0].index(i)
    aux.append(j+1)
    l1[0][j]=-1
  return aux

def perminv(l1):
  aux=list()
  for i in range(len(l1)):
    res=l1.index(i+1)
    aux.append(res+1)
  return aux

def Prom(l1):
  aux=0
  for i in l1:
    aux=aux+i
  return (int)(aux/len(l1))

def Sradio(can,r):
  ok=list()
  for x in can:
    distqu=space.Distance(0,x)
    if(distqu<=r):
      ok.appeden(x)
      #print(can.index(x))
      #space.printObj(x,distqu)
  return ok
def Skvecinos(can,k):
  r=999999999
  nn=list()
  nnaux=list()
  for x in can:
    if(len(nn)==k):
      r=max(nnaux)
      if(space.Distance(0,x)<r):
        nn[-1]=x
        nnaux[-1]=space.Distance(0,x)
        aux1=list()
        nnaux1=nnaux.copy()
        nnaux1.sort()
        for i in nnaux1:
          aux1.append(nn[nnaux.index(i)])
        nn=aux1
        nnaux=nnaux1

    else:
      aux1=list()
      nn.append(x)
      nnaux.append(space.Distance(0,x))
      nnaux1=nnaux.copy()
      nnaux1.sort()
      for i in nnaux1:
        aux1.append(nn[nnaux.index(i)])
      nn=aux1
      nnaux=nnaux1
  return nn

"""# Permutantes"""

def Distancia(i,qinv,resto):
  Sum=0
  pen=list()
  contpen=0
  contcom=0
  for j in range(len(Indice["tablaPerm"][i])):
    r1=abs((j+1)-qinv[Indice["tablaPerm"][i][j]-1])
    Sum=Sum+r1  
    pen.append(r1)
    #penalizacion
    #compartidos
    if(Indice["tablaPerm"][i][j] in Indice["tablaPerm"][0][:len(Indice["tablaPerm"][i])]):
      contcom=contcom+1
    #-----------
    if(Indice["tablaPerm"][i][j] in resto):
      contpen=contpen+1
  
  Sum=Sum+(Prom(pen)*contpen) + (len(Indice["tablaPerm"][i])-contcom)
  return Sum

def Search(q,r,index="indexPermutantes"):
  global Indice
  Indice=loadIndice(index)
  space.loadDB(Indice["db"])
  space.add(q)
#permutacion q
  qperm=[[]]
  for x in Indice["perm"]:
    qperm[0].append(space.Distance(0,x))
  
  Indice["tablaPerm"][0]=perm(qperm)
  qinv=perminv(Indice["tablaPerm"][0])

  resto=Indice["tablaPerm"][0][Indice["PromCorte"]:len(Indice["tablaPerm"][0])]
#-------------------------
  aux=[[]]
  #calculo de las distancias----------------------------------------------------
  for i in range(1,len(Indice["tablaPerm"])):
    aux[0].append(Distancia(i,qinv,resto))
  #print(aux)
  candidatos=ordenar(aux)
  #print(candidatos[0])
  ans=list()
  if(r>0):
    ans=Sradio(candidatos,r)
  else:
    ans=Skvecinos(candidatos,r)
  return ans
